# Generated by Django 2.2.16 on 2020-09-18 11:28

import collections
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import django_iban.fields
import invoicing.fields
import jsonfield.fields
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('INVOICE', 'Invoice'), ('ADVANCE', 'Advance invoice'), ('PROFORMA', 'Proforma invoice'), ('CREDIT_NOTE', 'Credit note')], default='INVOICE', max_length=64, verbose_name='type')),
                ('sequence', models.IntegerField(blank=True, db_index=True, default=None, verbose_name='sequence')),
                ('number', models.CharField(blank=True, max_length=128, verbose_name='number')),
                ('status', models.CharField(choices=[('NEW', 'new'), ('SENT', 'sent'), ('RETURNED', 'returned'), ('CANCELED', 'canceled'), ('PAID', 'paid'), ('CREDITED', 'credited'), ('UNCOLLECTIBLE', 'uncollectible')], default='NEW', max_length=64, verbose_name='status')),
                ('subtitle', models.CharField(blank=True, default=None, max_length=255, verbose_name='subtitle')),
                ('related_document', models.CharField(blank=True, max_length=100, verbose_name='related document')),
                ('language', models.CharField(choices=[('en', 'en')], max_length=10, verbose_name='language')),
                ('note', models.CharField(blank=True, default='Thank you for using our services.', max_length=255, verbose_name='note')),
                ('date_issue', models.DateField(verbose_name='issue date')),
                ('date_tax_point', models.DateField(help_text='time of supply', verbose_name='tax point date')),
                ('date_due', models.DateField(help_text='payment till', verbose_name='due date')),
                ('date_sent', model_utils.fields.MonitorField(blank=True, default=None, monitor='status', null=True, verbose_name='date sent', when={'SENT'})),
                ('date_paid', model_utils.fields.MonitorField(blank=True, default=None, monitor='status', null=True, verbose_name='date paid', when={'PAID'})),
                ('date_reminder_sent', models.DateTimeField(blank=True, default=None, null=True, verbose_name='date reminder sent')),
                ('currency', models.CharField(choices=[('XUA', 'ADB Unit of Account'), ('AFN', 'Afghani'), ('DZD', 'Algerian Dinar'), ('ARS', 'Argentine Peso'), ('AMD', 'Armenian Dram'), ('AWG', 'Aruban Guilder'), ('AUD', 'Australian Dollar'), ('AZN', 'Azerbaijanian Manat'), ('BSD', 'Bahamian Dollar'), ('BHD', 'Bahraini Dinar'), ('THB', 'Baht'), ('PAB', 'Balboa'), ('BBD', 'Barbados Dollar'), ('BYN', 'Belarussian Ruble'), ('BYR', 'Belarussian Ruble'), ('BZD', 'Belize Dollar'), ('BMD', 'Bermudian Dollar (customarily known as Bermuda Dollar)'), ('BTN', 'Bhutanese ngultrum'), ('VEF', 'Bolivar Fuerte'), ('BOB', 'Boliviano'), ('XBA', 'Bond Markets Units European Composite Unit (EURCO)'), ('BRL', 'Brazilian Real'), ('BND', 'Brunei Dollar'), ('BGN', 'Bulgarian Lev'), ('BIF', 'Burundi Franc'), ('XOF', 'CFA Franc BCEAO'), ('XAF', 'CFA franc BEAC'), ('XPF', 'CFP Franc'), ('CAD', 'Canadian Dollar'), ('CVE', 'Cape Verde Escudo'), ('KYD', 'Cayman Islands Dollar'), ('CLP', 'Chilean peso'), ('XTS', 'Codes specifically reserved for testing purposes'), ('COP', 'Colombian peso'), ('KMF', 'Comoro Franc'), ('CDF', 'Congolese franc'), ('BAM', 'Convertible Marks'), ('NIO', 'Cordoba Oro'), ('CRC', 'Costa Rican Colon'), ('HRK', 'Croatian Kuna'), ('CUP', 'Cuban Peso'), ('CUC', 'Cuban convertible peso'), ('CZK', 'Czech Koruna'), ('GMD', 'Dalasi'), ('DKK', 'Danish Krone'), ('MKD', 'Denar'), ('DJF', 'Djibouti Franc'), ('STD', 'Dobra'), ('DOP', 'Dominican Peso'), ('VND', 'Dong'), ('XCD', 'East Caribbean Dollar'), ('EGP', 'Egyptian Pound'), ('SVC', 'El Salvador Colon'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('XBB', 'European Monetary Unit (E.M.U.-6)'), ('XBD', 'European Unit of Account 17(E.U.A.-17)'), ('XBC', 'European Unit of Account 9(E.U.A.-9)'), ('FKP', 'Falkland Islands Pound'), ('FJD', 'Fiji Dollar'), ('HUF', 'Forint'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('XAU', 'Gold'), ('XFO', 'Gold-Franc'), ('PYG', 'Guarani'), ('GNF', 'Guinea Franc'), ('GYD', 'Guyana Dollar'), ('HTG', 'Haitian gourde'), ('HKD', 'Hong Kong Dollar'), ('UAH', 'Hryvnia'), ('ISK', 'Iceland Krona'), ('INR', 'Indian Rupee'), ('IRR', 'Iranian Rial'), ('IQD', 'Iraqi Dinar'), ('IMP', 'Isle of Man Pound'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('KES', 'Kenyan Shilling'), ('PGK', 'Kina'), ('LAK', 'Kip'), ('KWD', 'Kuwaiti Dinar'), ('AOA', 'Kwanza'), ('MMK', 'Kyat'), ('GEL', 'Lari'), ('LVL', 'Latvian Lats'), ('LBP', 'Lebanese Pound'), ('ALL', 'Lek'), ('HNL', 'Lempira'), ('SLL', 'Leone'), ('LSL', 'Lesotho loti'), ('LRD', 'Liberian Dollar'), ('LYD', 'Libyan Dinar'), ('SZL', 'Lilangeni'), ('LTL', 'Lithuanian Litas'), ('MGA', 'Malagasy Ariary'), ('MWK', 'Malawian Kwacha'), ('MYR', 'Malaysian Ringgit'), ('TMM', 'Manat'), ('MUR', 'Mauritius Rupee'), ('MZN', 'Metical'), ('MXV', 'Mexican Unidad de Inversion (UDI)'), ('MXN', 'Mexican peso'), ('MDL', 'Moldovan Leu'), ('MAD', 'Moroccan Dirham'), ('BOV', 'Mvdol'), ('NGN', 'Naira'), ('ERN', 'Nakfa'), ('NAD', 'Namibian Dollar'), ('NPR', 'Nepalese Rupee'), ('ANG', 'Netherlands Antillian Guilder'), ('ILS', 'New Israeli Sheqel'), ('RON', 'New Leu'), ('TWD', 'New Taiwan Dollar'), ('NZD', 'New Zealand Dollar'), ('KPW', 'North Korean Won'), ('NOK', 'Norwegian Krone'), ('PEN', 'Nuevo Sol'), ('MRO', 'Ouguiya'), ('TOP', 'Paanga'), ('PKR', 'Pakistan Rupee'), ('XPD', 'Palladium'), ('MOP', 'Pataca'), ('PHP', 'Philippine Peso'), ('XPT', 'Platinum'), ('GBP', 'Pound Sterling'), ('BWP', 'Pula'), ('QAR', 'Qatari Rial'), ('GTQ', 'Quetzal'), ('ZAR', 'Rand'), ('OMR', 'Rial Omani'), ('KHR', 'Riel'), ('MVR', 'Rufiyaa'), ('IDR', 'Rupiah'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('XDR', 'SDR'), ('SHP', 'Saint Helena Pound'), ('SAR', 'Saudi Riyal'), ('RSD', 'Serbian Dinar'), ('SCR', 'Seychelles Rupee'), ('XAG', 'Silver'), ('SGD', 'Singapore Dollar'), ('SBD', 'Solomon Islands Dollar'), ('KGS', 'Som'), ('SOS', 'Somali Shilling'), ('TJS', 'Somoni'), ('SSP', 'South Sudanese Pound'), ('LKR', 'Sri Lanka Rupee'), ('XSU', 'Sucre'), ('SDG', 'Sudanese Pound'), ('SRD', 'Surinam Dollar'), ('SEK', 'Swedish Krona'), ('CHF', 'Swiss Franc'), ('SYP', 'Syrian Pound'), ('BDT', 'Taka'), ('WST', 'Tala'), ('TZS', 'Tanzanian Shilling'), ('KZT', 'Tenge'), ('XXX', 'The codes assigned for transactions where no currency is involved'), ('TTD', 'Trinidad and Tobago Dollar'), ('MNT', 'Tugrik'), ('TND', 'Tunisian Dinar'), ('TRY', 'Turkish Lira'), ('TMT', 'Turkmenistan New Manat'), ('TVD', 'Tuvalu dollar'), ('AED', 'UAE Dirham'), ('XFU', 'UIC-Franc'), ('USD', 'US Dollar'), ('USN', 'US Dollar (Next day)'), ('UGX', 'Uganda Shilling'), ('CLF', 'Unidad de Fomento'), ('COU', 'Unidad de Valor Real'), ('UYI', 'Uruguay Peso en Unidades Indexadas (URUIURUI)'), ('UYU', 'Uruguayan peso'), ('UZS', 'Uzbekistan Sum'), ('VUV', 'Vatu'), ('CHE', 'WIR Euro'), ('CHW', 'WIR Franc'), ('KRW', 'Won'), ('YER', 'Yemeni Rial'), ('JPY', 'Yen'), ('CNY', 'Yuan Renminbi'), ('ZMK', 'Zambian Kwacha'), ('ZMW', 'Zambian Kwacha'), ('ZWD', 'Zimbabwe Dollar A/06'), ('ZWN', 'Zimbabwe dollar A/08'), ('ZWL', 'Zimbabwe dollar A/09'), ('PLN', 'Zloty')], max_length=10, verbose_name='currency')),
                ('credit', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='credit')),
                ('payment_method', models.CharField(choices=[('BANK_TRANSFER', 'bank transfer'), ('CASH', 'cash'), ('CASH_ON_DELIVERY', 'cash on delivery'), ('PAYMENT_CARD', 'payment card')], max_length=64, verbose_name='payment method')),
                ('constant_symbol', models.CharField(blank=True, choices=[('0001', '0001 - Payments for goods based on legal and executable decision from legal authority'), ('0008', '0008 - Cashless payments for goods'), ('0038', '0038 - Cashless funds for wages'), ('0058', '0058 - Cashless penalty and delinquency charges'), ('0068', '0068 - Transfer of funds for wages and other personal costs'), ('0138', '0138 - Cashless deductions at source'), ('0168', '0168 - Cashless payments in loans'), ('0178', '0178 - Sales from provided services'), ('0298', '0298 - Other cashless transfers'), ('0304', '0304 - Prior payments for services'), ('0308', '0308 - Cashless payments for services'), ('0358', '0358 - Payments dedicated to payout through post offices'), ('0379', '0379 - Other income, income from postal order'), ('0498', '0498 - Payments in loans'), ('0558', '0558 - Cashless other financial payments'), ('0934', '0934 - Benefits - prior payments'), ('0968', '0968 - Other cashless transfers'), ('1144', '1144 - Prior payment - advance'), ('1148', '1148 - Payment - current advance'), ('1744', '1744 - Accounting of tax at income tax of physical body and corporate body'), ('1748', '1748 - Income tax of physical body and corporate body based on declared tax year'), ('3118', '3118 - Insurance and empl. contrib. to insur. co. and the Labor Office'), ('3344', '3344 - Penalty from message - prior'), ('3348', '3348 - Penalty from message'), ('3354', '3354 - Insurance payments by insurance companies'), ('3558', '3558 - Cashless insurance payments by insurance companies'), ('8147', '8147 - Payment (posted together with the instruction)')], default=None, max_length=64, verbose_name='constant symbol')),
                ('variable_symbol', models.PositiveIntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9999999999)], verbose_name='variable symbol')),
                ('specific_symbol', models.PositiveIntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9999999999)], verbose_name='specific symbol')),
                ('reference', models.CharField(blank=True, default=None, max_length=140, verbose_name='reference')),
                ('bank_name', models.CharField(blank=True, default=None, max_length=255, verbose_name='bank name')),
                ('bank_street', models.CharField(blank=True, default=None, max_length=255, verbose_name='bank street and number')),
                ('bank_zip', models.CharField(blank=True, default=None, max_length=255, verbose_name='bank ZIP')),
                ('bank_city', models.CharField(blank=True, default=None, max_length=255, verbose_name='bank city')),
                ('bank_country', django_countries.fields.CountryField(blank=True, default=None, max_length=255, verbose_name='bank country')),
                ('bank_iban', django_iban.fields.IBANField(default=None, max_length=34, verbose_name='Account number (IBAN)')),
                ('bank_swift_bic', django_iban.fields.SWIFTBICField(default=None, max_length=11, verbose_name='Bank SWIFT / BIC')),
                ('supplier_name', models.CharField(default=None, max_length=255, verbose_name='supplier name')),
                ('supplier_street', models.CharField(blank=True, default=None, max_length=255, verbose_name='supplier street and number')),
                ('supplier_zip', models.CharField(blank=True, default=None, max_length=255, verbose_name='supplier ZIP')),
                ('supplier_city', models.CharField(blank=True, default=None, max_length=255, verbose_name='supplier city')),
                ('supplier_country', django_countries.fields.CountryField(default=None, max_length=2, verbose_name='supplier country')),
                ('supplier_registration_id', models.CharField(blank=True, default=None, max_length=255, verbose_name='supplier Reg. No.')),
                ('supplier_tax_id', models.CharField(blank=True, default=None, max_length=255, verbose_name='supplier Tax No.')),
                ('supplier_vat_id', invoicing.fields.VATField(blank=True, default=None, max_length=14, verbose_name='supplier VAT No.')),
                ('supplier_additional_info', jsonfield.fields.JSONField(blank=True, default=None, load_kwargs={'object_pairs_hook': collections.OrderedDict}, null=True, verbose_name='supplier additional information')),
                ('issuer_name', models.CharField(blank=True, default=None, max_length=255, verbose_name='issuer name')),
                ('issuer_email', models.EmailField(blank=True, default=None, max_length=254, verbose_name='issuer email')),
                ('issuer_phone', models.CharField(blank=True, default=None, max_length=255, verbose_name='issuer phone')),
                ('customer_name', models.CharField(default=None, max_length=255, verbose_name='customer name')),
                ('customer_street', models.CharField(blank=True, default=None, max_length=255, verbose_name='customer street and number')),
                ('customer_zip', models.CharField(blank=True, default=None, max_length=255, verbose_name='customer ZIP')),
                ('customer_city', models.CharField(blank=True, default=None, max_length=255, verbose_name='customer city')),
                ('customer_country', django_countries.fields.CountryField(default=None, max_length=2, verbose_name='customer country')),
                ('customer_registration_id', models.CharField(blank=True, default=None, max_length=255, verbose_name='customer Reg. No.')),
                ('customer_tax_id', models.CharField(blank=True, default=None, max_length=255, verbose_name='customer Tax No.')),
                ('customer_vat_id', invoicing.fields.VATField(blank=True, default=None, max_length=14, verbose_name='customer VAT No.')),
                ('customer_additional_info', jsonfield.fields.JSONField(blank=True, default=None, load_kwargs={'object_pairs_hook': collections.OrderedDict}, null=True, verbose_name='customer additional information')),
                ('customer_email', models.EmailField(blank=True, default=None, max_length=254, verbose_name='customer email')),
                ('customer_phone', models.CharField(blank=True, default=None, max_length=255, verbose_name='customer phone')),
                ('total', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, verbose_name='total')),
                ('vat', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True, verbose_name='VAT')),
                ('attachments', jsonfield.fields.JSONField(blank=True, default=None, load_kwargs={'object_pairs_hook': collections.OrderedDict}, null=True, verbose_name='attachments')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='modified')),
                ('related_invoices', models.ManyToManyField(blank=True, related_name='_invoice_related_invoices_+', to='invoicing.Invoice', verbose_name='related invoices')),
            ],
            options={
                'verbose_name': 'invoice',
                'verbose_name_plural': 'invoices',
                'db_table': 'invoicing_invoices',
                'ordering': ('date_issue', 'sequence'),
                'default_permissions': ('list', 'view', 'add', 'change', 'delete'),
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(verbose_name='title')),
                ('quantity', models.DecimalField(decimal_places=3, default=1, max_digits=10, verbose_name='quantity')),
                ('unit', models.CharField(choices=[('EMPTY', ''), ('PIECES', 'pcs.'), ('HOURS', 'hours')], default='PIECES', max_length=64, verbose_name='unit')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='unit price')),
                ('discount', models.DecimalField(decimal_places=1, default=0, max_digits=4, verbose_name='discount (%)')),
                ('tax_rate', models.DecimalField(blank=True, decimal_places=1, default=None, help_text='VAT rate', max_digits=3, null=True, verbose_name='tax rate (%)')),
                ('tag', models.CharField(blank=True, default=None, max_length=128, null=True, verbose_name='tag')),
                ('weight', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19)], default=0, help_text='ordering', null=True, verbose_name='weight')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='modified')),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invoicing.Invoice', verbose_name='invoice')),
            ],
            options={
                'verbose_name': 'item',
                'verbose_name_plural': 'items',
                'db_table': 'invoicing_items',
                'ordering': ('-invoice', 'weight', 'created'),
            },
        ),
    ]
